# Algorithm Challenges - Week 1 - 02.02.18

# Challenge #1
""" 
If we list all the natural numbers below 10 that are multiples of 3 or 5,
we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

Answer: 233168
"""
def solution(n):
    sum = 0
    for i in range(n):
        if i % 3 == 0 or i % 5 == 0:
            sum += i
    return sum

print(solution(1000))



# Challenge #2
"""
Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

Answer: 4613732
"""
def sum_even_fib(maxfib):
    fib = [1]
    sums = 0
    i = 0
    n = 0
    while n < maxfib:
        n = fib[i] + fib[i - 1]
        if n % 2 == 0:
            sums += n
        fib.append(n)
        i += 1
    return sums

print(sum_even_fib(4000000))



# Challenge #3
"""
The prime factors of 13192 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?

Answer: 6857
"""
def prime_factors(n):
    factors = []
    d = 2
    while n > 1:
        while n % d == 0:
            factors.append(d)
            n /= d
        d = d + 1
        if d*d > n:
            if n > 1: factors.append(n)
            break
    return factors[-1]

print(prime_factors(600851475143))